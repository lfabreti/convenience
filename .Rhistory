names(a) <- names(output_tree_parameters[[1]])
a
output_tree_parameters[[3]]
c <- list()
for (i in 1:length(output_tree_parameters[[3]])) {
b[[i]] <- (output_tree_parameters[[3]][[i]] > 0)
}
names(c) <- names(output_tree_parameters[[3]])
names(output_tree_parameters[[3]])
c
a <- list()
b <- list()
c <- list()
## ESS ##
for (i in 1:length(output_tree_parameters[[1]])) {
a[[i]] <- (output_tree_parameters[[1]][[i]] > 0)
}
names(a) <- names(output_tree_parameters[[1]])
for (i in 1:length(output_tree_parameters[[2]])) {
b[[i]] <- (output_tree_parameters[[2]][[i]] > 0)
}
names(b) <- names(output_tree_parameters[[2]])
for (i in 1:length(output_tree_parameters[[3]])) {
c[[i]] <- (output_tree_parameters[[3]][[i]] > 0)
}
names(c) <- names(output_tree_parameters[[3]])
a
b
c
output_continuous_parameters[[1]]
output_continuous_parameters[[1]][1]
output_continuous_parameters[[1]] > 0
ess_continuous <- output_continuous_parameters[[1]] > 0
ess_continuous
output_continuous_parameters[[2]]
output_continuous_parameters[[2]] > 0
ks_windows <- output_continuous_parameters[[2]] > 0
ks_windows
ks_runs <- output_continuous_parameters[[3]] > 0
ks_runs
decision_list <- list()
aux <- 0
# Check ess_runs_splits, results_splits, results_splits_runs
if( length(my_runs[[1]]$trees) > 0 ){
ess_splits <- list()
split_freq_windows <- list()
split_freq_runs <- list()
## ESS ##
for (i in 1:length(output_tree_parameters[[1]])) {
ess_splits[[i]] <- (output_tree_parameters[[1]][[i]] > 0)
}
names(ess_splits) <- names(output_tree_parameters[[1]])
for (i in 1:length(output_tree_parameters[[2]])) {
split_freq_windows[[i]] <- (output_tree_parameters[[2]][[i]] > 0)
}
names(split_freq_windows) <- names(output_tree_parameters[[2]])
for (i in 1:length(output_tree_parameters[[3]])) {
split_freq_runs[[i]] <- (output_tree_parameters[[3]][[i]] > 0)
}
names(split_freq_runs) <- names(output_tree_parameters[[3]])
aux <- aux + 1
decision_list[[aux]] <- ess_splits
aux <- aux + 1
decision_list[[aux]] <- split_freq_windows
aux <- aux + 1
decision_list[[aux]] <- split_freq_runs
}
# Check ess_runs_cont_param, ks_windows, ks_runs
if( length(my_runs[[1]]$ptable) > 0 ){
aux <- aux + 1
decision_list[[aux]] <- output_continuous_parameters[[1]] > 0
aux <- aux + 1
decision_list[[aux]] <- output_continuous_parameters[[2]] > 0
aux <- aux + 1
decision_list[[aux]] <- output_continuous_parameters[[3]] > 0
}
decision_list
decision_list[[1]]
which(decision_list[[1]] == FALSE)
which(decision_list[[1]][[1]] == FALSE)
which(decision_list[[1]][[2]] == FALSE)
which(decision_list[[1]][[3]] == FALSE)
which(decision_list[[1]][[4]] == FALSE)
which(decision_list[[2]][[4]] == FALSE)
which(decision_list[[2]][[3]] == FALSE)
which(decision_list[[2]][[2]] == FALSE)
which(decision_list[[2]][[1]] == FALSE)
which(decision_list[[2]][[5]] == FALSE)
decision_list[[4]]
which(decision_list[[4]] == FALSE)
which(decision_list[[4]][[1]] == FALSE)
decision_list[[4]][[1]]
decision_list
which(decision_list == FALSE)
which(decision_list[[1]] == FALSE)
which(decision_list[[4]] == FALSE)
typeof(decision_list[[4]])
typeof(decision_list[[1]])
ess_splits
which(ess_splits == FALSE)
which(ess_splits[[1]] == FALSE)
length(ess_splits)
for (i in 1:length(ess_splits)) {
which(ess_splits[[i]] == FALSE)}
}
for (i in 1:length(ess_splits)) {
print(which(ess_splits[[i]] == FALSE))
}
ess_splits <- list()
## ESS ##
for (i in 1:length(output_tree_parameters[[1]])) {
#ess_splits[[i]] <- (output_tree_parameters[[1]][[i]] > 0)
ess_splits[[i]] <- which(output_tree_parameters[[1]][[i]] < 0)
}
ess_splits
length(ess_splits)
ess_splits[[1]][[1]]
ess_splits[[1]][1]
is.na(ess_splits)
ess_splits[[1]]
ess_splits[[2]]
is.integer(ess_splits[[1]])
?which
ess_splits <- list()
## ESS ##
for (i in 1:length(output_tree_parameters[[1]])) {
#ess_splits[[i]] <- (output_tree_parameters[[1]][[i]] > 0)
ess_splits[[i]] <- which(output_tree_parameters[[1]][[i]] < 0, arr.ind = F)
}
ess_splits
ess_splits <- list()
## ESS ##
for (i in 1:length(output_tree_parameters[[1]])) {
#ess_splits[[i]] <- (output_tree_parameters[[1]][[i]] > 0)
ess_splits[[i]] <- which(output_tree_parameters[[1]][[i]] < 0, arr.ind = T)
}
ess_splits
length(ess_splits[[1]])
# Check ess_runs_splits, results_splits, results_splits_runs
if( length(my_runs[[1]]$trees) > 0 ){
ess_splits <- list()
split_freq_windows <- list()
split_freq_runs <- list()
## ESS ##
for (i in 1:length(output_tree_parameters[[1]])) {
ess_splits[[i]] <- which(output_tree_parameters[[1]][[i]] < 0)
}
names(ess_splits) <- names(output_tree_parameters[[1]])
for (i in 1:length(output_tree_parameters[[2]])) {
split_freq_windows[[i]] <- which(output_tree_parameters[[2]][[i]] < 0)
}
names(split_freq_windows) <- names(output_tree_parameters[[2]])
for (i in 1:length(output_tree_parameters[[3]])) {
split_freq_runs[[i]] <- which(output_tree_parameters[[3]][[i]] < 0)
}
names(split_freq_runs) <- names(output_tree_parameters[[3]])
aux <- aux + 1
decision_list[[aux]] <- ess_splits
aux <- aux + 1
decision_list[[aux]] <- split_freq_windows
aux <- aux + 1
decision_list[[aux]] <- split_freq_runs
}
decision_list
ess_splits
split_freq_windows
split_freq_runs
decision_list <- list()
aux <- 0
# Check ess_runs_splits, results_splits, results_splits_runs
if( length(my_runs[[1]]$trees) > 0 ){
ess_splits <- list()
split_freq_windows <- list()
split_freq_runs <- list()
## ESS ##
for (i in 1:length(output_tree_parameters[[1]])) {
ess_splits[[i]] <- which(output_tree_parameters[[1]][[i]] < 0)
}
names(ess_splits) <- names(output_tree_parameters[[1]])
for (i in 1:length(output_tree_parameters[[2]])) {
split_freq_windows[[i]] <- which(output_tree_parameters[[2]][[i]] < 0)
}
names(split_freq_windows) <- names(output_tree_parameters[[2]])
for (i in 1:length(output_tree_parameters[[3]])) {
split_freq_runs[[i]] <- which(output_tree_parameters[[3]][[i]] < 0)
}
names(split_freq_runs) <- names(output_tree_parameters[[3]])
aux <- aux + 1
decision_list[[aux]] <- ess_splits
aux <- aux + 1
decision_list[[aux]] <- split_freq_windows
aux <- aux + 1
decision_list[[aux]] <- split_freq_runs
}
decision_list
length(decision_list)
which(output_continuous_parameters[[1]] <0)
# Check ess_runs_cont_param, ks_windows, ks_runs
if( length(my_runs[[1]]$ptable) > 0 ){
aux <- aux + 1
decision_list[[aux]] <- which(output_continuous_parameters[[1]] < 0)
aux <- aux + 1
decision_list[[aux]] <- which(output_continuous_parameters[[2]] < 0)
aux <- aux + 1
decision_list[[aux]] <- which(output_continuous_parameters[[3]] < 0)
}
length(decision_list)
which(length(decision_list)==0)
length(decision_list[[1]])
length(decision_list[[2]])
length(decision_list[[3]])
length(decision_list[[4]])
length(decision_list[[5]])
length(decision_list[[6]])
ess_splits
which(length(ess_splits)==0)
which(length(split_freq_windows)==0)
which(length(split_freq_runs)==0)
decision_list <- list()
aux <- 0
ess_splits <- list()
split_freq_windows <- list()
split_freq_runs <- list()
## ESS ##
for (i in 1:length(output_tree_parameters[[1]])) {
ess_splits[[i]] <- which(output_tree_parameters[[1]][[i]] < 0)
}
names(ess_splits) <- names(output_tree_parameters[[1]])
for (i in 1:length(output_tree_parameters[[2]])) {
split_freq_windows[[i]] <- which(output_tree_parameters[[2]][[i]] < 0)
}
names(split_freq_windows) <- names(output_tree_parameters[[2]])
for (i in 1:length(output_tree_parameters[[3]])) {
split_freq_runs[[i]] <- which(output_tree_parameters[[3]][[i]] < 0)
}
names(split_freq_runs) <- names(output_tree_parameters[[3]])
aux <- aux + 1
decision_list[[aux]] <- ess_splits
aux <- aux + 1
decision_list[[aux]] <- split_freq_windows
aux <- aux + 1
decision_list[[aux]] <- split_freq_runs
decision_list
for (i in 1:length(decision_list)) {
for (j in 1:length(decision_list[[i]])) {
if( length(decision_list[[i]][[j]]) > 0){
print("fail")
}
}
}
count_decision <- 0
for (i in 1:length(decision_list_trees)) {
for (j in 1:length(decision_list_trees[[i]])) {
if( length(decision_list_trees[[i]][[j]]) > 0){
count_decision <- count_decision + 1
print(decision_list_trees[[i]][[j]])
}
}
}
decision_list_trees <- list()
decision_list_cont <- list()
count_decision <- 0
ess_splits <- list()
split_freq_windows <- list()
split_freq_runs <- list()
## ESS ##
for (i in 1:length(output_tree_parameters[[1]])) {
ess_splits[[i]] <- which(output_tree_parameters[[1]][[i]] < 0)
}
names(ess_splits) <- names(output_tree_parameters[[1]])
for (i in 1:length(output_tree_parameters[[2]])) {
split_freq_windows[[i]] <- which(output_tree_parameters[[2]][[i]] < 0)
}
names(split_freq_windows) <- names(output_tree_parameters[[2]])
for (i in 1:length(output_tree_parameters[[3]])) {
split_freq_runs[[i]] <- which(output_tree_parameters[[3]][[i]] < 0)
}
names(split_freq_runs) <- names(output_tree_parameters[[3]])
decision_list_trees[[1]] <- ess_splits
decision_list_trees[[2]] <- split_freq_windows
decision_list_trees[[3]] <- split_freq_runs
for (i in 1:length(decision_list_trees)) {
for (j in 1:length(decision_list_trees[[i]])) {
if( length(decision_list_trees[[i]][[j]]) > 0){
count_decision <- count_decision + 1
print(decision_list_trees[[i]][[j]])
}
}
}
decision_list_cont[[1]] <- which(output_continuous_parameters[[1]] < 0)
decision_list[[2]] <- which(output_continuous_parameters[[2]] < 0)
decision_list[[3]] <- which(output_continuous_parameters[[3]] < 0)
decision_list_cont <- list()
decision_list_cont[[1]] <- which(output_continuous_parameters[[1]] < 0)
decision_list_cont[[2]] <- which(output_continuous_parameters[[2]] < 0)
decision_list_cont[[3]] <- which(output_continuous_parameters[[3]] < 0)
decision_list_cont
decision_list_cont[[1]]
length(decision_list_cont[[1]])
decision_list_trees <- list()
decision_list_cont <- list()
count_decision <- 0
##### ONLY TREE FILES #####
# Check ess_runs_splits, results_splits, results_splits_runs
if( length(my_runs[[1]]$trees) > 0 ){
ess_splits <- list()
split_freq_windows <- list()
split_freq_runs <- list()
## ESS ##
for (i in 1:length(output_tree_parameters[[1]])) {
ess_splits[[i]] <- which(output_tree_parameters[[1]][[i]] < 0)
}
names(ess_splits) <- names(output_tree_parameters[[1]])
for (i in 1:length(output_tree_parameters[[2]])) {
split_freq_windows[[i]] <- which(output_tree_parameters[[2]][[i]] < 0)
}
names(split_freq_windows) <- names(output_tree_parameters[[2]])
for (i in 1:length(output_tree_parameters[[3]])) {
split_freq_runs[[i]] <- which(output_tree_parameters[[3]][[i]] < 0)
}
names(split_freq_runs) <- names(output_tree_parameters[[3]])
decision_list_trees[[1]] <- ess_splits
decision_list_trees[[2]] <- split_freq_windows
decision_list_trees[[3]] <- split_freq_runs
for (i in 1:length(decision_list_trees)) {
for (j in 1:length(decision_list_trees[[i]])) {
if( length(decision_list_trees[[i]][[j]]) > 0){
count_decision <- count_decision + 1
}
}
}
}
##### ONLY LOG FILES #####
# Check ess_runs_cont_param, ks_windows, ks_runs
if( length(my_runs[[1]]$ptable) > 0 ){
decision_list_cont[[1]] <- which(output_continuous_parameters[[1]] < 0)
decision_list_cont[[2]] <- which(output_continuous_parameters[[2]] < 0)
decision_list_cont[[3]] <- which(output_continuous_parameters[[3]] < 0)
for (i in 1:length(decision_list_cont)) {
if( length(decision_list_cont[[i]]) == 0 ){
count_decision <- count_decision + 1
}
}
}
count_decision
if(count_decision == 0){
final_output[[1]] <- "Achieved convergence"
}else{
final_output[[1]] <- "Failed convergence"
}
final_output <- list()
if(count_decision == 0){
final_output[[1]] <- "Achieved convergence"
}else{
final_output[[1]] <- "Failed convergence"
}
final_output
split_freq_windows
split_freq_windows[[3]]
split_freq_windows[3]
decision_list_trees[1]
decision_list_trees[2]
length(decision_list_trees[2])
fails <- list()
for (i in 1:length(decision_list_trees)) {
for (j in 1:length(decision_list_trees[[i]])) {
if( length(decision_list_trees[[i]][[j]]) > 0){
count_decision <- count_decision + 1
fails[[i+j]] <- decision_list_trees[[i]][[j]]
}
}
}
fails
for (i in 1:length(decision_list_trees)) {
for (j in 1:length(decision_list_trees[[i]])) {
if( length(decision_list_trees[[i]][[j]]) > 0){
print(decision_list_trees[[i]][[j]])
count_decision <- count_decision + 1
fails[[i+j]] <- decision_list_trees[[i]][[j]]
}
}
}
fails <- list()
for (i in 1:length(decision_list_trees)) {
for (j in 1:length(decision_list_trees[[i]])) {
if( length(decision_list_trees[[i]][[j]]) > 0){
print(decision_list_trees[[i]][[j]])
count_decision <- count_decision + 1
fails <- c(fails,decision_list_trees[[i]][[j]])
}
}
}
fails
decision_list_trees
decision_list_trees[[2]]
decision_list_trees[[2]][1]
fails <- list()
count_decision <- 0
for (i in 1:length(decision_list_trees)) {
for (j in 1:length(decision_list_trees[[i]])) {
if( length(decision_list_trees[[i]][j]) > 0){
count_decision <- count_decision + 1
fails <- c(fails,decision_list_trees[[i]][j])
}
}
}
fails
fails <- list()
count_decision <- 0
for (i in 1:length(decision_list_trees)) {
for (j in 1:length(decision_list_trees[[i]])) {
if( length(decision_list_trees[[i]][[j]]) > 0){
count_decision <- count_decision + 1
fails <- c(fails,decision_list_trees[[i]][j])
}
}
}
fails
for (i in 1:length(decision_list_cont)) {
if( length(decision_list_cont[[i]]) == 0 ){
count_decision <- count_decision + 1
fails <- c(fails, decision_list_cont[[i]])
}
}
fails
if(count_decision == 0){
final_output[[1]] <- "Achieved convergence"
}else{
final_output[[1]] <- "Failed convergence"
final_output[[2]] <- fails
}
final_output <- c(final_output, output_continuous_parameters)
final_output <- c(final_output, output_tree_parameters)
final_output
if(count_decision == 0){
final_output[[1]] <- "Achieved convergence"
}else{
final_output[[1]] <- "Failed convergence"
final_output[[2]] <- fails
names(final_output[[2]]) <- "Outputs that failed"
}
final_output
names(final_output[1])
names(final_output[2])
if(count_decision == 0){
final_output[[1]] <- "Achieved convergence"
}else{
final_output[[1]] <- "Failed convergence"
final_output[[2]] <- fails
names(final_output[2]) <- "Outputs that failed"
}
final_output
final_output <- list()
decision_list_trees <- list()
decision_list_cont <- list()
fails <- list()
count_decision <- 0
##### ONLY TREE FILES #####
# Check ess_runs_splits, results_splits, results_splits_runs
if( length(my_runs[[1]]$trees) > 0 ){
ess_splits <- list()
split_freq_windows <- list()
split_freq_runs <- list()
## ESS ##
for (i in 1:length(output_tree_parameters[[1]])) {
ess_splits[[i]] <- which(output_tree_parameters[[1]][[i]] < 0)
}
names(ess_splits) <- names(output_tree_parameters[[1]])
for (i in 1:length(output_tree_parameters[[2]])) {
split_freq_windows[[i]] <- which(output_tree_parameters[[2]][[i]] < 0)
}
names(split_freq_windows) <- names(output_tree_parameters[[2]])
for (i in 1:length(output_tree_parameters[[3]])) {
split_freq_runs[[i]] <- which(output_tree_parameters[[3]][[i]] < 0)
}
names(split_freq_runs) <- names(output_tree_parameters[[3]])
decision_list_trees[[1]] <- ess_splits
decision_list_trees[[2]] <- split_freq_windows
decision_list_trees[[3]] <- split_freq_runs
for (i in 1:length(decision_list_trees)) {
for (j in 1:length(decision_list_trees[[i]])) {
if( length(decision_list_trees[[i]][[j]]) > 0){
count_decision <- count_decision + 1
fails <- c(fails,decision_list_trees[[i]][j])
}
}
}
}
##### ONLY LOG FILES #####
# Check ess_runs_cont_param, ks_windows, ks_runs
if( length(my_runs[[1]]$ptable) > 0 ){
decision_list_cont[[1]] <- which(output_continuous_parameters[[1]] < 0)
decision_list_cont[[2]] <- which(output_continuous_parameters[[2]] < 0)
decision_list_cont[[3]] <- which(output_continuous_parameters[[3]] < 0)
for (i in 1:length(decision_list_cont)) {
if( length(decision_list_cont[[i]]) == 0 ){
count_decision <- count_decision + 1
fails <- c(fails, decision_list_cont[[i]])
}
}
}
if(count_decision == 0){
final_output[[1]] <- "Achieved convergence"
}else{
final_output[[1]] <- "Failed convergence"
final_output[[2]] <- fails
names(final_output[2]) <- "Outputs that failed"
}
final_output <- c(final_output, output_continuous_parameters)
final_output <- c(final_output, output_tree_parameters)
final_output
devtools::load_all(".")
