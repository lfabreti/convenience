file.format <- get.format(format)
output <- list()
# Convert arguments to regex
ext.tree <- paste0("\\",file.format$trees.suffix, "$")
get.format <- function(format){
# Default behavior for MrBayes files
if(format == "mb"){
return(list(
trees.suffix = ".t",
log.suffix = ".p",
type = "nexus",
skip = 1
))
}
# Default behavior for *BEAST files
if(format == "*beast"){
return(list(
trees.suffix = ".species.trees",
log.suffix = ".log",
type = "nexus",
skip = 2
))
}
# Default behavior for BEAST files
if(format == "beast"){
return(list(
trees.suffix = ".trees",
log.suffix = ".log",
type = "nexus",
skip = 2
))
}
# Default behavior for revbayes files
if(format == "revbayes"){
return(list(
trees.suffix = ".trees",
log.suffix = ".log",
type = "revbayes",
skip = 0
))
}
}
file.format <- get.format(format)
# Convert arguments to regex
ext.tree <- paste0("\\",file.format$trees.suffix, "$")
ext.tree
ext.p <- file.format$log.suffix
ext.p
# Find t and p files
tfiles <- list.files(path, pattern=ext.tree, full.names=TRUE)
pfiles <- unlist(lapply(tfiles, FUN = function(x) sub(ext.tree, ext.p, x)))
tfiles
path
list.files(path)
format = "revbayes"
file.format <- get.format(format)
file.format
# Convert arguments to regex
ext.tree <- paste0("\\",file.format$trees.suffix, "$")
ext.p <- file.format$log.suffix
# Find t and p files
tfiles <- list.files(path, pattern=ext.tree, full.names=TRUE)
pfiles <- unlist(lapply(tfiles, FUN = function(x) sub(ext.tree, ext.p, x)))
tfiles
pfiles
treeFiles
tfiles <- treeFiles
pfiles <- logFiles
if(length(tfiles) == 0){
stop("Couldn't find any tree files")
}
# Step through tfiles, find log files if available, load chains
for(i in 1:length(tfiles)){
print(basename(tfiles[i]))
if(file.exists(pfiles[i])){
output[[i]] <- load.trees(tfiles[i], logfile = pfiles[i], format = format, ...)
}
else{
output[[i]] <- load.trees(tfiles[i], format = format, ...)
}
}
devtools::load_all("~/Projects/convenience")
load.multi(tree_files = treeFiles, log_files = logFiles)
devtools::load_all("~/Projects/convenience")
load.multi(tree_files = treeFiles, log_files = logFiles)
# Convert arguments to regex
ext.tree <- paste0("\\",file.format$trees.suffix, "$")
ext.p <- file.format$log.suffix
# Find t and p files
tfiles <- list.files(path, pattern=ext.tree, full.names=TRUE)
pfiles <- unlist(lapply(tfiles, FUN = function(x) sub(ext.tree, ext.p, x)))
tfiles
# Step through tfiles, find log files if available, load chains
for(i in 1:length(tfiles)){
print(basename(tfiles[i]))
if(file.exists(pfiles[i])){
output[[i]] <- load.trees(tfiles[i], logfile = pfiles[i], format = format, ...)
}
else{
output[[i]] <- load.trees(tfiles[i], format = format, ...)
}
}
# Step through tfiles, find log files if available, load chains
for(i in 1:length(tfiles)){
print(basename(tfiles[i]))
if(file.exists(pfiles[i])){
output[[i]] <- load.trees(tfiles[i], logfile = pfiles[i], format = format)
}
else{
output[[i]] <- load.trees(tfiles[i], format = format)
}
}
tfiles <- tree_files
tfiles <- treeFiles
pfiles <- logFiles
tfiles <- tree_files
tfiles
# Step through tfiles, find log files if available, load chains
for(i in 1:length(tfiles)){
print(basename(tfiles[i]))
if(file.exists(pfiles[i])){
output[[i]] <- load.trees(tfiles[i], logfile = pfiles[i], format = format)
}
else{
output[[i]] <- load.trees(tfiles[i], format = format)
}
}
file <- tfiles[1]
file
filelines<-readLines(file)
getwd()
ext.tree
treeFiles
treeFiles <- c("4_runs/bears_cytb_GTR_run_1.trees", "4_runs/bears_cytb_GTR_run_2.trees")
tfiles <- treeFiles
# Step through tfiles, find log files if available, load chains
for(i in 1:length(tfiles)){
print(basename(tfiles[i]))
if(file.exists(pfiles[i])){
output[[i]] <- load.trees(tfiles[i], logfile = pfiles[i], format = format)
}
else{
output[[i]] <- load.trees(tfiles[i], format = format)
}
}
devtools::load_all("~/Projects/convenience")
devtools::load_all("~/Projects/convenience")
devtools::load_all("~/Projects/convenience")
a <- loadFiles("4_runs/")
a
getwd()
list_files <- c("4_runs/bears_cytb_GTR_run_1.log", "4_runs/bears_cytb_GTR_run_2.log", "4_runs/bears_cytb_GTR_run_1.trees", "4_runs/bears_cytb_GTR_run_2.trees")
b <- loadMulti(list_files = list_files)
list_files
character_paths_are_strings <- is.character(list_files)
if ( any(character_paths_are_strings == FALSE) == TRUE ) {
# print out the ones that are not character strings
cat( "Some paths are not character strings:",
paste0("\t",paths[character_paths_are_strings == FALSE]), sep="\n")
stop()
}
do_files_exist <- file.exists(list_files)
if ( any(do_files_exist == FALSE) == TRUE ) {
# print out paths to files that don't exist
cat( "Some files do not exist:",
paste0("\t",list_files[do_files_exist == FALSE]), sep="\n")
stop()
}
logFiles <- list_files[ grepl(log_ext, list_files) ]
log_ext = "*.log"
tree_ext="*.trees"
logFiles <- list_files[ grepl(log_ext, list_files) ]
treeFiles <- list_files[ grepl(tree_ext, list_files) ]
logFiles
treeFiles
path
all_vecs <- vector("list", length = 0)
for(i in 1:length(treeFiles)){
all_vecs[[i]] <- paste("run_", i, sep = "")
}
vec <- unlist(all_vecs)
if ( !is.null(path)){
output <- loadMulti(path , format = format, labels=vec)
}else {
output <- loadMulti( tree_files = treeFiles, log_files = logFiles, format = format)
}
path<-NULL
if ( !is.null(path)){
output <- loadMulti(path , format = format, labels=vec)
}else {
output <- loadMulti( tree_files = treeFiles, log_files = logFiles, format = format)
}
format = "revbayes"
if ( !is.null(path)){
output <- loadMulti(path , format = format, labels=vec)
}else {
output <- loadMulti( tree_files = treeFiles, log_files = logFiles, format = format)
}
list_files
getwd()
list_files <- c("/4_runs/bears_cytb_GTR_run_1.log", "/4_runs/bears_cytb_GTR_run_2.log", "/4_runs/bears_cytb_GTR_run_1.trees", "/4_runs/bears_cytb_GTR_run_2.trees")
b <- loadMulti(list_files = list_files)
devtools::load_all("~/Projects/convenience")
b <- loadMulti(list_files = list_files)
list_files
path
!is.null(path)
!is.null(list_files)
devtools::load_all("~/Projects/convenience")
b <- loadMulti(list_files = list_files)
list_files
output <- list()
if ( !is.null(path) ){
files <- list.files(path, recursive=F)
files <- files[ grepl("*run*|*joint*|*stone*", files) ]
logFiles <- files[ grepl(log_ext, files) ]
treeFiles <- files[ grepl(tree_ext, files) ]
}
else {
# enforce argument matching
character_paths_are_strings <- is.character(list_files)
if ( any(character_paths_are_strings == FALSE) == TRUE ) {
# print out the ones that are not character strings
cat( "Some paths are not character strings:",
paste0("\t",paths[character_paths_are_strings == FALSE]), sep="\n")
stop()
}
do_files_exist <- file.exists(list_files)
if ( any(do_files_exist == FALSE) == TRUE ) {
# print out paths to files that don't exist
cat( "Some files do not exist:",
paste0("\t",list_files[do_files_exist == FALSE]), sep="\n")
stop()
}
logFiles <- list_files[ grepl(log_ext, list_files) ]
treeFiles <- list_files[ grepl(tree_ext, list_files) ]
}
if ( !is.null(path) ){
files <- list.files(path, recursive=F)
files <- files[ grepl("*run*|*joint*|*stone*", files) ]
logFiles <- files[ grepl(log_ext, files) ]
treeFiles <- files[ grepl(tree_ext, files) ]
}
else {
# enforce argument matching
character_paths_are_strings <- is.character(list_files)
if ( any(character_paths_are_strings == FALSE) == TRUE ) {
# print out the ones that are not character strings
cat( "Some paths are not character strings:",
paste0("\t",paths[character_paths_are_strings == FALSE]), sep="\n")
stop()
}
do_files_exist <- file.exists(list_files)
if ( any(do_files_exist == FALSE) == TRUE ) {
# print out paths to files that don't exist
cat( "Some files do not exist:",
paste0("\t",list_files[do_files_exist == FALSE]), sep="\n")
stop()
}
logFiles <- list_files[ grepl(log_ext, list_files) ]
treeFiles <- list_files[ grepl(tree_ext, list_files) ]
}
if ( !is.null(path) ){
files <- list.files(path, recursive=F)
files <- files[ grepl("*run*|*joint*|*stone*", files) ]
logFiles <- files[ grepl(log_ext, files) ]
treeFiles <- files[ grepl(tree_ext, files) ]
}else {
# enforce argument matching
character_paths_are_strings <- is.character(list_files)
if ( any(character_paths_are_strings == FALSE) == TRUE ) {
# print out the ones that are not character strings
cat( "Some paths are not character strings:",
paste0("\t",paths[character_paths_are_strings == FALSE]), sep="\n")
stop()
}
do_files_exist <- file.exists(list_files)
if ( any(do_files_exist == FALSE) == TRUE ) {
# print out paths to files that don't exist
cat( "Some files do not exist:",
paste0("\t",list_files[do_files_exist == FALSE]), sep="\n")
stop()
}
logFiles <- list_files[ grepl(log_ext, list_files) ]
treeFiles <- list_files[ grepl(tree_ext, list_files) ]
}
getwd()
list.files("4_runs/")
list_files
list_files <- c("/4_runs/bears_cytb_GTR_run_1.log", "4_runs/bears_cytb_GTR_run_2.log", "4_runs/bears_cytb_GTR_run_1.trees", "4_runs/bears_cytb_GTR_run_2.trees")
list_files <- c("4_runs/bears_cytb_GTR_run_1.log", "4_runs/bears_cytb_GTR_run_2.log", "4_runs/bears_cytb_GTR_run_1.trees", "4_runs/bears_cytb_GTR_run_2.trees")
output <- list()
if ( !is.null(path) ){
files <- list.files(path, recursive=F)
files <- files[ grepl("*run*|*joint*|*stone*", files) ]
logFiles <- files[ grepl(log_ext, files) ]
treeFiles <- files[ grepl(tree_ext, files) ]
}else {
# enforce argument matching
character_paths_are_strings <- is.character(list_files)
if ( any(character_paths_are_strings == FALSE) == TRUE ) {
# print out the ones that are not character strings
cat( "Some paths are not character strings:",
paste0("\t",paths[character_paths_are_strings == FALSE]), sep="\n")
stop()
}
do_files_exist <- file.exists(list_files)
if ( any(do_files_exist == FALSE) == TRUE ) {
# print out paths to files that don't exist
cat( "Some files do not exist:",
paste0("\t",list_files[do_files_exist == FALSE]), sep="\n")
stop()
}
logFiles <- list_files[ grepl(log_ext, list_files) ]
treeFiles <- list_files[ grepl(tree_ext, list_files) ]
}
logFiles
treeFiles
# No files
if ( length(logFiles) == 0 & length(treeFiles) == 0 ){
stop("No files to read")
}
all_vecs <- vector("list", length = 0)
for(i in 1:length(treeFiles)){
all_vecs[[i]] <- paste("run_", i, sep = "")
}
vec <- unlist(all_vecs)
if ( !is.null(path)){
output <- loadMulti(path , format = format, labels=vec)
}else {
output <- loadMulti( tree_files = treeFiles, log_files = logFiles, format = format)
}
devtools::load_all("~/Projects/convenience")
b <- loadMulti(list_files = list_files)
logFiles
treeFiles
format
loadMulti( tree_files = treeFiles, log_files = logFiles, format = format)
if ( !is.null(path) ){
# Convert arguments to regex
ext.tree <- paste0("\\",file.format$trees.suffix, "$")
ext.p <- file.format$log.suffix
# Find t and p files
tfiles <- list.files(path, pattern=ext.tree, full.names=TRUE)
pfiles <- unlist(lapply(tfiles, FUN = function(x) sub(ext.tree, ext.p, x)))
}
if ( !is.null(path) ){
# Convert arguments to regex
ext.tree <- paste0("\\",file.format$trees.suffix, "$")
ext.p <- file.format$log.suffix
# Find t and p files
tfiles <- list.files(path, pattern=ext.tree, full.names=TRUE)
pfiles <- unlist(lapply(tfiles, FUN = function(x) sub(ext.tree, ext.p, x)))
}else {
tfiles <- tree_files
pfiles <- log_files
}
treeFiles
tree_files = treeFiles
log_files = logFiles
if ( !is.null(path) ){
# Convert arguments to regex
ext.tree <- paste0("\\",file.format$trees.suffix, "$")
ext.p <- file.format$log.suffix
# Find t and p files
tfiles <- list.files(path, pattern=ext.tree, full.names=TRUE)
pfiles <- unlist(lapply(tfiles, FUN = function(x) sub(ext.tree, ext.p, x)))
}else {
tfiles <- tree_files
pfiles <- log_files
}
tfiles
length(tfiles)
if(length(tfiles) == 0){
stop("Couldn't find any tree files")
}
# Step through tfiles, find log files if available, load chains
for(i in 1:length(tfiles)){
print(basename(tfiles[i]))
if(file.exists(pfiles[i])){
output[[i]] <- load.trees(tfiles[i], logfile = pfiles[i], format = format)
}
else{
output[[i]] <- load.trees(tfiles[i], format = format)
}
}
# Add names to chains
if(is.na(labels)){
names(output) <- lapply(tfiles, FUN = function(x) basename (x))
}
else{
names(output) <- labels
}
devtools::load_all("~/Projects/convenience")
list_files
loadFiles(list_files = list_files)
a
loadFiles("4_runs/")
devtools::load_all("~/Projects/convenience")
loadFiles(list_files = list_files)
devtools::load_all("~/Projects/convenience")
jc <- checkConvergence("../../../MadPhylo/CTMC_Tutorial/output/JC/")
jc
jc$failed
hky <- checkConvergence("../../../MadPhylo/CTMC_Tutorial/output/HKY/")
hky
hky$failed$tree_parameters
gtr <- checkConvergence("../../../MadPhylo/CTMC_Tutorial/output/GTR/")
gtr
gtr$failed$tree_parameters
gtr_g_i <- checkConvergence("../../../MadPhylo/CTMC_Tutorial/output/GTR_Gamma_Inv/")
gtr_g_i
gtr_g_i$failed$continuous_parameters
gtr_g_i$failed$tree_parameters
setwd("../../../MadPhylo/CTMC_Tutorial/output/")
getwd()
jc_files <- c("JC/primates_cytb_JC_run_1.log", "JC/primates_cytb_JC_run_1.trees", "JC/primates_cytb_JC_run_2.log", "JC/primates_cytb_JC_run_2.trees")
devtools::load_all("~/Projects/convenience")
jc_2 <- checkConvergence(list_files = jc_files)
jc_2
gtr_g_i$failed$continuous_parameters
getwd()
setwd("..")
ls
getwd()
setwd("..")
fbd <- checkConvergence("FBD/output/")
fbd <- checkConvergence("FBD/output/")
fbd <- checkConvergence("FBD/output/")
list_files = NULL
control = makeControl()
fbd <- loadFiles("FBD/")
fbd <- loadFiles("FBD/output/")
fbd
x <- fbd
x
start <-1
if(class(x) == "rwty.chain"){
x <- x$trees
}
x
if (length(x) == 1 && class(x[[1]]) == "multiPhylo"){
x <- x[[1]]
}
x
runs <- fbd
z<-1
x <- getInfo(runs, z, trees = TRUE)
x
names_runs <- c(names_runs, paste("Run_", z, sep = ""))
listESS <- list()
names_runs <- vector()
names_runs <- c(names_runs, paste("Run_", z, sep = ""))
clades.list <- list()
for (j in 1:length(x)) {
clades.list[[j]] <- clade.freq.tree(x[[j]])
}
clades.list
length(x)
clades <-  clade.freq.trees(x, start = 1, end = length(x))
x
if(class(x) == "rwty.chain"){
x <- x$trees
}
if (length(x) == 1 && class(x[[1]]) == "multiPhylo"){
x <- x[[1]]
}
x
start <-1
end <- length(x)
x <- x[start:end]
x
clades <-  prop.part(x)
clades.list[1]
clades.list[2]
for (i in 1:length(clades.list)){}
for (i in 1:length(clades.list)){ print(length(clades.list[i]))}
for (i in 1:length(clades.list)){ print(length(clades.list[[i]]))}
clades.list[11]
clades.list[1]
clades.list[[1]]$cladefreqs
length(clades.list[[1]]$cladefreqs)
for (i in 1:length(clades.list)){ print(length(clades.list[[i]]$cladefreqs))}
for (i in 1:length(clades.list)){ print(length(clades.list[[i]]$cladefreqs))
}
for (i in 1:length(clades.list)){
if(length(clades.list[[i]]$cladefreqs)>16){
print(length(clades.list[[i]]$cladefreqs))
}
}
x
clades <-  prop.part(x)
x
class(x)
clades <- prop.part(x)
clades.list[1]
x_1 <- x[1:100]
prop.part(x_1)
x_2 <- x[100:200]
prop.part(x_2)
x_3 <- x[200:300]
prop.part(x_3)
x_12 <- x[1:2]
prop.part(x_12)
clades.list[1]
clades.list[[1]]$cladenames
clades.list[[2]]$cladenames
?analyze.rwty
my_trees <- load.multi("FBD/output/")
my_trees <- load.multi("FBD/output/", format = "revbayes")
analyze.rwty(my_trees)
topological.approx.ess(my_trees)
